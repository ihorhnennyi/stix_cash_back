import { ValidationPipe } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { NestFactory } from '@nestjs/core';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import { AdminService } from './admin/admin.service';
import { AppModule } from './app.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);

  app.enableCors({
    origin: true,
    credentials: true,
  });

  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,
      forbidNonWhitelisted: true,
      transform: true,
    }),
  );

  const config = new DocumentBuilder()
    .setTitle('üí∞ Stix Cash API')
    .setDescription(
      `
      **Stix Cash Backend API**

      –≠—Ç–æ —Å–µ—Ä–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã *Stix Cash*, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å:

      - ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, refresh tokens)
      - ‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ (–æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å)
      - ‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
      - ‚úÖ –ë–∞–ª–∞–Ω—Å–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      - ‚úÖ –ü–ª–∞—Ç—ë–∂–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
      - ‚úÖ –û—Ç—á—ë—Ç–∞–º–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π

      ‚ö†Ô∏è –í—Å–µ –∑–∞—â–∏—â—ë–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã —Ç—Ä–µ–±—É—é—Ç Bearer JWT —Ç–æ–∫–µ–Ω

      –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –º–æ–¥—É–ª—é –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –ø–æ –º–µ—Ä–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ üöÄ
      `,
    )
    .setVersion('1.0.0')
    .addBearerAuth()
    .build();

  const document = SwaggerModule.createDocument(app, config);
  SwaggerModule.setup('api/docs', app, document, {
    swaggerOptions: {
      persistAuthorization: true,
    },
  });

  const configService = app.get(ConfigService);
  const PORT = configService.get<number>('PORT') ?? 3000;
  await app.listen(PORT);

  console.log(`üöÄ Stix Cash Backend is running on: http://localhost:${PORT}`);
  console.log(`üìö Swagger Docs: http://localhost:${PORT}/api/docs`);

  // ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ root-–∞–¥–º–∏–Ω–∞
  const adminService = app.get(AdminService);
  const rootEmail = configService.get<string>('ROOT_ADMIN_EMAIL');
  const rootPassword = configService.get<string>('ROOT_ADMIN_PASSWORD');

  if (rootEmail && rootPassword) {
    const existingAdmin = await adminService.findByEmail(rootEmail);
    if (!existingAdmin) {
      await adminService.createAdmin(rootEmail, rootPassword);
      console.log(`‚úÖ Root admin created: ${rootEmail}`);
    } else {
      console.log(`‚ÑπÔ∏è Root admin already exists: ${rootEmail}`);
    }
  } else {
    console.warn(
      '‚ö†Ô∏è ROOT_ADMIN_EMAIL or ROOT_ADMIN_PASSWORD is missing in .env',
    );
  }
}

bootstrap().catch((err) => {
  console.error('‚ùå Error during bootstrap:', err);
});
